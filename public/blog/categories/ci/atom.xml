<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ci | GoodNiceWeb]]></title>
  <link href="http://goodniceweb.me/blog/categories/ci/atom.xml" rel="self"/>
  <link href="http://goodniceweb.me/"/>
  <updated>2015-05-11T17:34:19+03:00</updated>
  <id>http://goodniceweb.me/</id>
  <author>
    <name><![CDATA[Alexey Cherkashin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins With Rails Step-by-step]]></title>
    <link href="http://goodniceweb.me/05-11-2015/jenkins-with-rails-step-by-step.html"/>
    <updated>2015-05-11T13:38:52+03:00</updated>
    <id>http://goodniceweb.me/05-11-2015/jenkins-with-rails-step-by-step</id>
    <content type="html"><![CDATA[<p>In <a href="http://goodniceweb.me/05-04-2015/jenkins-rails-docker-container.html">my previous post</a>
you can find manual of jenkins-rails container usage. Here I want to extend it,
add some screenshots and so on.</p>

<p>At first, let&rsquo;s create new rails app.</p>

<!-- more -->


<pre><code class="bash">$ rails --version
Rails 4.2.0.rc2
$ rails new candy --skip-test-unit &amp;&amp; cd candy
$ git init &amp;&amp; git add . &amp;&amp; git ci -m "Initial commit"
</code></pre>

<p>Now I&rsquo;ll install <code>rspec</code> and make get some dead simple tests from scaffold.</p>

<p><a href="http://pastie.org/private/nuhg3wvcphhc0euzkd4tw">Gemfile</a></p>

<pre><code class="bash">$ rails g rspec:install
$ rails g scaffold article title content:text
$ rake db:migrate
$ echo '-f documentation' &gt;&gt; .rspec
$ rspec spec
</code></pre>

<p>Last will must return smth. like this</p>

<pre><code class="bash">Finished in 0.2916 seconds
30 examples, 0 failures, 2 pending
</code></pre>

<p>Than let&rsquo;s execute line from previous post.</p>

<pre><code class="bash">$ docker run -d \
    -p 8080:8080 \
    -v ~/your/folder:/home/jenkins_home \
    --name jenkins \
    goodniceweb/jenkins-rails:latest
</code></pre>

<p>Now on visiting <a href="http://localhost:8080/">http://localhost:8080/</a> you&rsquo;ll see Jenkins dashboard screen.</p>

<h1>screenshot</h1>

<p>At first here I propose to make Jenkins more secure. Click to &ldquo;Manage Jenkins&rdquo; link
and than to &ldquo;Setup Security&rdquo; button. On opened page check &ldquo;Enable security&rdquo; box.</p>

<h1>screenshot</h1>

<p>In &ldquo;Access Control&rdquo; section &ldquo;Security Realm&rdquo; sub-section choose &ldquo;Jenkinsâ€™ own user database&rdquo; radiobutton.
Below, in &ldquo;Authorization&rdquo; sub-section choose &ldquo;Project-based Matrix Authorization Strategy&rdquo; option.</p>

<h1>screenshot</h1>

<p>You&rsquo;ll able to see created table with only &lsquo;Anonymous&rsquo; user for now. We will fix it later.
At first let&rsquo;s add &lsquo;Read&rsquo; permission to Anonymous user. Just tick according checkbox.</p>

<h1>screenshot</h1>

<p>Ok, now the time for creating admin user. Focus this input&hellip;</p>

<h1>screenshot</h1>

<p>&hellip; write &lsquo;admin&rsquo; and press &ldquo;Add&rdquo; button. Then scroll horisontally, if its need,
and press on this little icon. All checkboxes should be chosen for admin, right?</p>

<p>Perfect. Now I propose to save your changes. Press &ldquo;Save&rdquo; button underneath.
You should be redirected to login page after this because now you are Anonymous user.
Don&rsquo;t worry, directly after registration you&rsquo;ll able to continue configuring Jenkins.</p>

<h1>screenshot</h1>

<p>Super awesome. Now time to initialize our project. Press &ldquo;create new jobs&rdquo; on main page
or &ldquo;New Item&rdquo; link. Than choose a name and select &ldquo;Freestyle project&rdquo; option. Press &ldquo;OK&rdquo;.</p>

<h1>screenshot</h1>

<p>Then you&rsquo;ll see Job Settings page. Few things here need to be configured:</p>

<ol>
<li>Security settings. Add your &lsquo;admin&rsquo; user with all permissions.</li>
<li>Choose &ldquo;Git&rdquo; from &ldquo;Source Code Management&rdquo; section. Install your credentials.
I prefer to use https with login/password for this test.</li>
<li>Install push hooks and rvm settings.</li>
<li><p>Insert build script for testing project</p>

<p>I prefer to use smth. like this:</p>

<pre><code class="bash">bundle install --without production --deployment
cp -f config/database.yml.example config/database.yml
cp -f config/secrets.yml.example config/secrets.yml
bundle exec rake db:migrate RAILS_ENV=test 
bundle exec rspec spec 
</code></pre>

<p>Here we make sure that we had latest gem and database settings.
Also we place secrets.yml file, update db state and run the tests.</p></li>
<li><p>Let&rsquo;s create email notification for failing cases.</p></li>
</ol>


<p>That&rsquo;s it. Pressing &ldquo;Save&rdquo; button will redirect us to main Job page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Docker Container for Rails]]></title>
    <link href="http://goodniceweb.me/05-04-2015/jenkins-rails-docker-container.html"/>
    <updated>2015-05-04T12:25:29+03:00</updated>
    <id>http://goodniceweb.me/05-04-2015/jenkins-rails-docker-container</id>
    <content type="html"><![CDATA[<p>Today I want to present my first contribution to Docker community -
<a href="https://registry.hub.docker.com/u/goodniceweb/jenkins-rails/">Jenkins Rails image</a>.</p>

<p>For better understanding what work was done I propose to look into
<a href="https://github.com/goodniceweb/docker-jenkins-rails/blob/master/Dockerfile">Dockerfile</a>.
At first lines you can see system upgrades, installing Rails requirements
and npm. Secondly, we ignore auto generated docs and install useful plugins.</p>

<p>That&rsquo;s it! Is it so little? Maybe, but it&rsquo;s enough for start. Almost.</p>

<p>Are you want to know how to use and extend it for your needs?
What are you waiting for - press a &ldquo;Read more&rdquo; button.</p>

<!--more-->


<h2>How to use</h2>

<pre><code class="bash">docker run -p 8080:8080 \
           -v /your/host/volume:/home/jenkins_home \
           goodniceweb/jenkins-rails:latest
</code></pre>

<p>Visit <code>your.domain.example:8080</code> and voila: here is Jenkins
prepared for your Rails project!</p>

<h2>How to extend</h2>

<p>In few cases you find something missing in this based image.
Fortunately, it&rsquo;s easy to extend.</p>

<p>Firstly, create your own Dockerfile.</p>

<pre><code class="bash">FROM goodniceweb/jenkins-rails:latest
MAINTAINER Your Name &lt;your@email&gt;

# capybara requirements
# RUN npm install -g phantomjs

# dependencies of running javascript test on instances without X 
# RUN apt-get install -y vnc4server 

# help to avoid error MoveTargetOutOfBoundsError
# RUN apt-get install -y fluxbox

# rmagick dependencies
# RUN apt-get install -y imagemagick

# dependencies of capybara webkit gem
# RUN apt-get install -y libqt4-dev libqtwebkit-dev

# Good practice - drop back to regular user
USER jenkins

ENTRYPOINT ["/usr/local/bin/jenkins.sh"]
</code></pre>

<p>I think above comments are very self explain.</p>

<p>Secondly, run <code>docker build</code> command. For ex.</p>

<pre><code class="bash">docker build -t my-nick/my-jenkins-build:latest .
</code></pre>

<p>Finally, just run it.</p>

<pre><code class="bash">docker run -p 8080:8080 \
           -v /your/host/volume:/home/jenkins_home \
           my-nick/my-jenkins-build:latest
</code></pre>

<p>That&rsquo;s it! So easy, isn&rsquo;t?</p>

<p>I hope you find it useful. Have a nice web!</p>
]]></content>
  </entry>
  
</feed>
